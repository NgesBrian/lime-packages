#!/usr/bin/lua

network = {}

local ip = require("luci.ip")
local libuci = require("uci")
local fs = require("nixio.fs")

local config = require("lime.config")
local utils = require("lime.utils")

network.limeIfNamePrefix="lm_"
network.protoParamsSeparator=":"
network.vlanSeparator="."

function network.get_mac(ifname)
	local mac = assert(fs.readfile("/sys/class/net/"..ifname.."/address")):gsub("\n","")
	return utils.split(mac, ":")
end

function network.primary_interface()
	return config.get("network", "primary_interface")
end

function network.primary_mac()
	return network.get_mac(network.primary_interface())
end

function network.primary_address()
	local pm = network.primary_mac()
	local ipv4_template = utils.applyMacTemplate10(config.get("network", "main_ipv4_address"), pm)
	local ipv6_template = utils.applyMacTemplate16(config.get("network", "main_ipv6_address"), pm)

	return ip.IPv4(ipv4_template), ip.IPv6(ipv6_template) 
end

function network.setup_rp_filter()
	local sysctl_file_path = "/etc/sysctl.conf";
	local sysctl_options = "";
	local sysctl_file = io.open(sysctl_file_path, "r");
	while sysctl_file:read(0) do
		local sysctl_line = sysctl_file:read();
		if not string.find(sysctl_line, ".rp_filter") then sysctl_options = sysctl_options .. sysctl_line .. "\n" end 
	end
	sysctl_file:close()
	
	sysctl_options = sysctl_options .. "net.ipv4.conf.default.rp_filter=2\nnet.ipv4.conf.all.rp_filter=2\n";
	sysctl_file = io.open(sysctl_file_path, "w");
	sysctl_file:write(sysctl_options);
	sysctl_file:close();
end

function network.setup_dns()
	local content = {}
	for _,server in pairs(config.get("network", "resolvers")) do
		table.insert(content, "nameserver "..server)
	end
	fs.writefile("/etc/resolv.conf", table.concat(content, "\n").."\n")
end

function network.clean()
	print("Clearing network config...")

	local uci = libuci:cursor()

	uci:delete("network", "globals", "ula_prefix")

	-- Delete interfaces generated by LiMe
	uci:foreach("network", "interface", function(s) if s[".name"]:match(network.limeIfNamePrefix) then uci:delete("network", s[".name"]) end end)

	uci:save("network")

	print("Disabling odhcpd")
	io.popen("/etc/init.d/odhcpd disable || true"):close()

	print("Cleaning dnsmasq")
	io.popen("/etc/init.d/dnsmasq disable || true"):close()

	os.remove("/etc/resolv.conf")
	fs.remove("/etc/dnsmasq.d")
	fs.mkdirr("/etc/dnsmasq.d")
	fs.writefile("/etc/config/dhcp", "config dnsmasq\n\toption leasefile\t'/tmp/dhcp.leases'\n")
	fs.writefile("/etc/dnsmasq.conf", "conf-dir=/etc/dnsmasq.d\n")

	print("Disabling 6relayd...")
	fs.writefile("/etc/config/6relayd", "")
end

function network.scandevices()
	local devices = {}

	-- Scan for plain ethernet interfaces
	for _,dev in pairs(utils.split(io.popen("ls -1 /sys/class/net/"):read("*a"), "\n")) do
		if dev:match("^eth%d$") then
			table.insert(devices, dev)
		end
	end

	-- Scan for plain wireless interfaces
	local uci = libuci:cursor()
	uci:foreach("wireless", "wifi-iface", function(s) table.insert(devices, s["ifname"]) end)

	-- When we will support other device type just scan for them here
	
	return devices
end

function network.configure()

	network.setup_rp_filter()

	network.setup_dns()

	local generalProtocols = config.get("network", "protocols")
	for _,protocol in pairs(generalProtocols) do
		local protoModule = "lime.proto."..utils.split(protocol,":")[1]
		if utils.isModuleAvailable(protoModule) then
			local proto = require(protoModule)
			proto.configure(utils.split(protocol, network.protoParamsSeparator))
		end
	end

	local specificIfaces = {}
	config.foreach("net", function(iface) specificIfaces[iface[".name"]] = iface end)
	
	-- Scan for fisical devices, if there is a specific config apply that otherwise apply general config
	local fisDevs = network.scandevices()
	for _,device in pairs(fisDevs) do
		local owrtIf = specificIfaces[device]
		local deviceProtos = generalProtocols
		if owrtIf then deviceProtos = owrtIf["protocols"] end

		for _,protoParams in pairs(deviceProtos) do
			local args = utils.split(protoParams, network.protoParamsSeparator)
			if args[1] == "manual" then break end -- If manual is specified do not configure interface
			local protoModule = "lime.proto."..args[1]
			if utils.isModuleAvailable(protoModule) then
				local proto = require(protoModule)
				proto.setup_interface(device, args)
			end
		end
	end
end

return network
